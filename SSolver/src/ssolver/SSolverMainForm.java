/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ssolver;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;

/**
 *
 * @author Zeeg
 */
public class SSolverMainForm extends javax.swing.JFrame {
public static TableModel tm;
public static JTable table;
    /**
     * Creates new form SSolverMainForm
     */
    public SSolverMainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object [][] {
            {"8", null, null, null, null, null, null, null, null},
            {null, null, "3", "6", null, null, null, null, null},
            {null, "7", null, null, "9", null, "2", null, null},
            {null, "5", null, null, null, "7", null, null, null},
            {null, null, null, null, "4", "5", "7", null, null},
            {null, null, null, "1", null, null, null, "3", null},
            {null, null, "1", null, null, null, null, "6", "8"},
            {null, null, "8", "5", null, null, null, "1", null},
            {null, "9", null, null, null, null, "4", null, null},
        },
        new String [] {
            "", "", "", "", "", "", "", "", ""
        }));
        jTable1.setGridColor(new java.awt.Color(153, 153, 153));
        jTable1.setRowHeight(20);
        jTable1.setRowSelectionAllowed(false);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Solve");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(115, 115, 115))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static int[][] getValues()
    {
        int[][] values = new int[tm.getRowCount()][tm.getColumnCount()];
        for (int i = 0; i < tm.getRowCount(); i++) 
            for (int j = 0; j < tm.getColumnCount(); j++) 
                try
                {
                    values[i][j]= Integer.parseInt((String) tm.getValueAt(i, j)); 
                }
                catch (java.lang.NumberFormatException ex)
                {                    
                    values[i][j] = 0;
                }
        return values;
    }
    
    public static int[] getRowValues(int rowNumber)
    {        
        return getValues()[rowNumber];
    }
    
    public static int[] getColValues(int colNumber)
    {
        int[][] values = getValues();
        int[] colValues = new int[values[0].length];
        for (int i = 0; i < values.length; i++) 
            colValues[i] = values[i][colNumber]; 
        return colValues;
    }
    
    public static int[][] getQuadrantValues(int rowNumber, int colNumber, int[][] allValues)
    {
        /*System.out.println("=================");
        System.out.println("Col number:" + colNumber);
        System.out.println("Row number:" + rowNumber);
        System.out.println("=================");*/
        int[][] quadrantValues = new int[3][3];
        int[] quadrantBorders = {0,3,6,9};
        int lowBorder=0;
        int leftBorder=0;
        int topBorder=0;
        int rightBorder=3;        
        for (int qb = 0; qb < quadrantBorders.length-1; qb++) 
            if (rowNumber>=quadrantBorders[qb] && rowNumber<=quadrantBorders[qb+1])
            {                    
                lowBorder = quadrantBorders[qb];
                topBorder = quadrantBorders[qb+1];
            }
        for (int qb = 0; qb < quadrantBorders.length-1; qb++) 
            if (colNumber>=quadrantBorders[qb] && colNumber<=quadrantBorders[qb+1])
            {                    
                leftBorder = quadrantBorders[qb];
                rightBorder = quadrantBorders[qb+1];
            }
        //System.out.println("Borders: " +leftBorder+'\t'+rightBorder+'\t'+lowBorder+'\t'+topBorder);
        for (int i = 0; i < 3; i++) 
            for (int j = 0; j < 3; j++) 
                quadrantValues[i][j] = allValues[lowBorder+i][leftBorder+j];
        return quadrantValues;
    }
    
    public static boolean isAbsentInRow(int number, int currentRow, int[][] Values)
    {
        ArrayList arrl = new ArrayList<>(Arrays.asList(getRowValues(currentRow)));
        return (arrl.contains(number));
    }
    
    public static boolean isAbsentInColumn(int number, int currentCol, int[][] Values)
    {
        ArrayList arrl = new ArrayList<>(Arrays.asList(getColValues(currentCol)));
        return (arrl.contains(number));
    }
    
    public static boolean isAbsentInQuadrant(int number, int currentRow, int currentCol, int[][] Values)
    {
        ArrayList arrl = new ArrayList<>(Arrays.asList(getQuadrantValues(currentRow, currentCol, Values)));
        return (arrl.contains(number));
    }
    
    public static boolean Fits(int number, int row, int col)
    {
        return (isAbsentInRow(number, row, getValues()) && isAbsentInColumn(number, row, getValues()) && isAbsentInQuadrant(number, row, col, getValues()));
    }
    
    public static int getNumbAmount(int[] arr)
    {
        int am = 0;
        for (int i = 0; i < arr.length; i++) 
            am+=(arr[i]!=0)?1:0;
        return am;
    }
    
    public static int getNumbAmount(int[][] arr)
    {
        int am = 0;
        for (int i = 0; i < arr.length; i++) 
            for (int j = 0; j < arr[i].length; j++)                 
                am+=(arr[i][j]!=0)?1:0;
        return am;
    }
    
    public static int countWage(int row, int col)
    {
        HashSet<Integer> uniqueValues = new HashSet<>();
        int[][] allValues = getValues();
        int[][] qValues;
        int[] values;
        values = getRowValues(row);
        for (int i = 0; i < values.length; i++) 
            uniqueValues.add(values[i]);            
        values = getColValues(col);
        for (int i = 0; i < values.length; i++) 
            uniqueValues.add(values[i]);            
        qValues = getQuadrantValues(row, col, allValues);
        for (int i = 0; i < qValues.length; i++) 
            for (int j = 0; j < qValues[i].length; j++) 
                uniqueValues.add(qValues[i][j]);
        return uniqueValues.size();
    }
    
    public static ArrayList<int[]> generateWages(int allWages[][])
    {
        ArrayList<int[]> wages = new ArrayList<>();
        
        for (int i = 0; i < allWages.length; i++) 
            for (int j = 0; j < allWages[i].length; j++) {
                if (allWages[i][j] == 0)
                {
                    int[] newWage = new int[3];
                    newWage[0] = countWage(i, j);
                    newWage[1] = i;
                    newWage[2] = j;
                    wages.add(newWage);
                }                
            }
        return wages;
    }
    
    public static ArrayList<int[]> sortWages(ArrayList<int[]> wages)
    {
        ArrayList<int[]> sortedWages = wages;
        boolean sortable = true;
        int[] tmp;
        while (sortable)
        {
            sortable = false;
            for (int i = 0; i < sortedWages.size()-1; i++) {
                if (sortedWages.get(i)[0] < sortedWages.get(i+1)[0])
                {
                    tmp = sortedWages.get(i);
                    sortedWages.set(i,sortedWages.get(i+1));
                    sortedWages.set(i+1,tmp);    
                    sortable = true;
                }            
            }
        }
        return sortedWages;
    }
    
    public static Object[] getMissingNumbs(int row, int col)
    {
        HashSet totalValues = new HashSet();
        ArrayList <Integer> leftValues = new ArrayList<>();
        int[][] allValues = getValues();
        int[][] qValues;
        int[] values;
        values = getRowValues(row);
        for (int i = 0; i < values.length; i++) 
            totalValues.add(values[i]);            
        values = getColValues(col);
        for (int i = 0; i < values.length; i++) 
            totalValues.add(values[i]);            
        qValues = getQuadrantValues(row, col, allValues);
        for (int i = 0; i < qValues.length; i++) 
            for (int j = 0; j < qValues[i].length; j++) 
                totalValues.add(qValues[i][j]);
        for (int i = 1; i < 10; i++) 
            if (!totalValues.contains(i)) 
                leftValues.add(i);
        return leftValues.toArray();            
    }
    
    public static void solve()
    {
        ArrayList<int[]> sw = sortWages(generateWages(getValues()));
        while (sw.size()>0 && getMissingNumbs(sw.get(0)[1], sw.get(0)[2]).length<2)
        {            
            int row = sw.get(0)[1];
            int col = sw.get(0)[2];
            Object[] cellMissingValues = getMissingNumbs(row, col);
            if (cellMissingValues.length==1)
            {
                table.changeSelection(row, col, false, false);
                table.setValueAt(cellMissingValues[0].toString(), row, col);
                System.out.println("Setting " + row + "x" + col + "as " + cellMissingValues[0].toString());
            } 
            sw = sortWages(generateWages(getValues()));
            /*try {
                //sleep();
                Thread.sleep(250);
            } catch (InterruptedException ex) {
                //Logger.getLogger(SSolverMainForm.class.getName()).log(Level.SEVERE, null, ex);
            }*/
        }        
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            int[][] setValues = getValues();       
            ArrayList<int[]> ws = generateWages(setValues);
            //System.out.println(ws.isEmpty());
            ArrayList<int[]> sw = sortWages(generateWages(setValues));
            //System.out.println(sw.isEmpty());
            int row = sw.get(0)[1];
            int col = sw.get(0)[2];
            table.changeSelection(row, col, false, false);
            System.out.println("The most perspective wage: " + sw.get(0)[0]);
            // TODO add your handling code here:
            System.out.println(Arrays.toString(getMissingNumbs(sw.get(0)[1], sw.get(0)[2])));
            solve();
        }
        catch (IndexOutOfBoundsException ex)
        {
            System.out.println("Already solved!");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SSolverMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SSolverMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SSolverMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SSolverMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //setting table model
                
                //
                SSolverMainForm ss = new SSolverMainForm();  
                table = ss.jTable1;
                /*table.setModel(new javax.swing.table.DefaultTableModel(new Object [][] {
                    {"2", "7", "8", "4", null, null, null, "1", null},
                    {null, null, null, "1", null, "2", "8", "7", "9"},
                    {null, null, "5", "8", "7", null, "4", null, "2"},
                    {null, "1", "2", "7", null, null, "9", null, null},
                    {"7", null, "9", null, "2", null, "3", "5", "4"},
                    {"4", "3", null, null, null, null, null, "2", "7"},
                    {"8", null, null, "2", "6", "4", "7", "9", null},
                    {"3", "2", "7", null, null, null, null, "4", null},
                    {null, null, "4", "3", "1", "7", "2", null, "5"}
                },
                new String [] {
                    "", "", "", "", "", "", "", "", ""
                }));*/
                table.setModel(new javax.swing.table.DefaultTableModel(new Object [][] {
                    {null,null,null,null,null,null,null,null,null},
                    {null,null,null,null,null,null,null,null,null},
                    {null,null,null,null,null,null,null,null,null},
                    {null,null,null,null,null,null,null,null,null},
                    {null,null,null,null,null,null,null,null,null},
                    {null,null,null,null,null,null,null,null,null},
                    {null,null,null,null,null,null,null,null,null},
                    {null,null,null,null,null,null,null,null,null},
                    {null,null,null,null,null,null,null,null,null}
                },
                new String [] {
                    "", "", "", "", "", "", "", "", ""
                }));
                tm = ss.jTable1.getModel();
                ss.jTable1.setShowGrid(false);
                ss.jTable1.setShowVerticalLines(true);
                ss.jTable1.setShowHorizontalLines(true);
                JTable table = ss.jTable1;
                table.setCellSelectionEnabled(true);
                
                //////////////////////////////////////
                ListSelectionModel cellSelectionModel = table.getSelectionModel();
                cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
                    @Override
                    public void valueChanged(ListSelectionEvent e) {   
                        
                        int selectedRow = table.getSelectedRow();
                        int selectedColumn = table.getSelectedColumn();
                        System.out.println("WAGE:" + countWage(selectedRow, selectedColumn));
                        System.out.println("------------");
                        System.out.println(Arrays.toString(getMissingNumbs(selectedRow, selectedColumn)));
                        /*int[][] qv = getQuadrantValues(selectedRow, selectedColumn, getValues());
                        for (int i = 0; i < qv.length; i++) {
                            System.out.println(Arrays.toString(qv[i]));                            
                        }
                        System.out.println("------------");*/
                        //table.getColumnModel().getColumn(selectedColumn).setCellRenderer(new StatusColumnCellRenderer());
                    }
                });
                //////////////////////////////////////
                ss.setVisible(true);
//                ss.jTable1.setModel(null);
//                javax.swing.table.DefaultTableModel myModel = (javax.swing.table.DefaultTableModel) ss.jTable1.getModel();
//                myModel.set
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
